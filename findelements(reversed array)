/*There is an integer array nums sorted in ascending order (with distinct values).Prior to being passed to your function, nums is possibly rotated at an unknown pivot  index k (1  <=  k  <  nums.length) 
such  that  the  resulting  array  is [nums[k], nums[k+1],   ...,   nums[n-1], nums[0],   nums[1],   ...,   nums[k-1]] (0-indexed).   For   example, [0,1,2,4,5,6,7] might     
be        rotated        at        pivot        index 3   and become [4,5,6,7,0,1,2].Given the array nums after the possible rotation and an integer target, returnthe index
oftarget if it is in nums, or -1   if it is not in nums.You must write an algorithm with O(log n) runtime complexity.
Example 1:Input:nums = [4,  5, 6, 7, 0, 1, 2], 
target = 0 
Output: 4 
Example 2:Input:nums = [4,  5, 6, 7, 0, 1, 2], target = 3
Output:   -1   */


fun rotateArray(nums:IntArray, pivot: Int){
    //1,2,3,4,5,6,7
    //7 6 5 4 3 2 1
    //4 5 6 7 || 1 2 3
   val n = nums.size

  // Step 1: Reverse the whole array
    reverse(nums, 0, n - 1)

    // Step 2: Reverse the first part (now at the end)
    reverse(nums, 0, n - pivot - 1)

    // Step 3: Reverse the second part (now at the front)
    reverse(nums, n - pivot, n - 1)
}
fun reverse(arr: IntArray, start: Int, end: Int){
    var left = start
    var right= end
    while(left<right){
        val temp = arr[left]
        arr[left]=arr[right]
        arr[right]=temp
       left++
        right--
    }
}
fun main() {
   val nums = intArrayOf(0, 1, 2, 4, 5, 6, 7)
    val pivot = 3
    val target = 7
    var found = false

    println("Original array: ${nums.joinToString(", ")}")

    rotateArray(nums, pivot)

    println("Rotated array : ${nums.joinToString(", ")}")
    
    for(i in 0 until nums.size){
        if(target == nums[i]){
            println("Target $target is in index $i")  
               found = true
                break
        } 
    }
    if (!found) {
    println("Target $target not found in array")
}
}
