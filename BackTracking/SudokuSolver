fun main() {
   val sudoku = arrayOf(
        intArrayOf(5, 3, 0, 0, 7, 0, 0, 0, 0),
        intArrayOf(6, 0, 0, 1, 9, 5, 0, 0, 0),
        intArrayOf(0, 9, 8, 0, 0, 0, 0, 6, 0),
        intArrayOf(8, 0, 0, 0, 6, 0, 0, 0, 3),
        intArrayOf(4, 0, 0, 8, 0, 3, 0, 0, 1),
        intArrayOf(7, 0, 0, 0, 2, 0, 0, 0, 6),
        intArrayOf(0, 6, 0, 0, 0, 0, 2, 8, 0),
        intArrayOf(0, 0, 0, 4, 1, 9, 0, 0, 5),
        intArrayOf(0, 0, 0, 0, 8, 0, 0, 7, 9))
   if(sudokuSolver(sudoku,0,0)){
       println("Solution Exist")
       printSudoku(sudoku)
   }else{ 
       println("Solution does not exist")
   }
}
fun printSudoku(sudoku : Array<IntArray>){
    for(i in 0 until 9){
        for(j in 0 until 9){
            print("${sudoku[i][j]} ")
        }
        println()
    }
    
}
fun sudokuSolver(sudoku : Array<IntArray>,row: Int, col: Int):Boolean{
    //base case
    if(row == 9){
        return true
    }
    
    //recursion
    var nextRow = row
    var nextCol = col+1
    if(col+1 == 9){
        nextRow = row+1
        nextCol = 0
    }
    if(sudoku[row][col]!=0){  //alredy given elements so it will not change
       return sudokuSolver(sudoku,nextRow,nextCol)
    }
    for(digit in 1..9){
        if(isSafe(sudoku,row,col,digit)){
            sudoku[row][col] = digit
           if(sudokuSolver(sudoku,nextRow,nextCol)){//solution exists
               return true
           }
           sudoku[row][col]=0
        }
    }
    return false
}
fun isSafe(sudoku : Array<IntArray>,row: Int, col: Int,digit:Int):Boolean{
    //col
    for(i in 0 until 8){
        if(sudoku[i][col]==digit){return false}
    }
    //row
    for(j in 0 until 8){
        if(sudoku[row][j]==digit){return false}
    }
    //grid
    var sr = (row/3)*3  //sr= starting row
    var sc = (col/3)*3
    for(i in sr until sr+3){
        for(j in sc until sc+3){
            if(sudoku[i][j]==digit){return false}
        }
    }
   return true 
}
