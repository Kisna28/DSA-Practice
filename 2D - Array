//Search Element in 2D-Array
fun search(arr : Array<Array<Int>>,key : Int){
    for(i in 0 until arr.size){
    for(j in 0 until arr[0].size){  //arr[0].size is for finding a cloumn size
      if(arr[i][j]==key){
            print("$i and $j")
            return
      }
    }
    println()
}
    println("key not found")
}
//Spiral Matrix
fun spiral(arr : Array<Array<Int>>){
    var startRow = 0
    var endRow = arr.size - 1
    var startColumn = 0
    var endColumn = arr[0].size - 1
    while(startRow <= endRow && startColumn <= endColumn ){
        //Top
        for(j in startRow until endColumn){
            print("${arr[startRow][j]} ")
        }
        //Right
        for(i in startRow+1 until endRow ){
             if(startRow == endRow){
                 break
             }
             print("${arr[i][endColumn]} ")
        }
        //bottom
         for(j in endColumn-1 downTo startColumn ){
             if(startColumn == endColumn){
                 break
             }
             print("${arr[endRow][j]} ")
        }
         //left
         for(i in endRow-1 downTo startColumn+1 ){
             print("${arr[i][startColumn]} ")
        }
        startColumn++
        startRow++
        endRow--
        endColumn--
         
    }
}
fun diagonalDiff(arr:Array<Array<Int>>){
    var left = 0
    var right = 0
    val size = arr.size
    for(i in arr.indices){//indices direct check index also we write (i in 0 until arr.size).
        // println("i = $i") 
        left+=arr[i][i]  //it printl [0,0] [1,1]...
        // println(left)
         val column = size-1-i
         right+= arr[i][column]
    }
    val sum = Math.abs(right-left)
    println(sum)
}
fun diagonalSum(arr:Array<Array<Int>>){ //O(n^2)
    var sum = 0
   /* for(i in 0 until arr.size){
        for(j in 0 until arr[0].size){
            if(i==j){
                sum+=arr[i][j]
            }
            else if(i + j == arr.size-1){
                sum+=arr[i][j]
            }
        }
    }
    println(sum) */
    
    //Optimize code
    for(i in 0 until arr.size){
        sum+=arr[i][i]
        if(i != arr.size-1-i){
        sum+=arr[i][arr.size-i-1]
        }
    }
    println(sum)
}
fun sortedSearch(arr:Array<Array<Int>>,key:Int){  //TC is less  O(n)
    var row =0 
    var col = arr[0].size-1
    while(row<arr.size && col>=0){
        if(arr[row][col]==key){
            println("Key find at $row and $col")
            return
        }else if( key< arr[row][col]){
            col--
        }else{
            row++
        }
    }
    
    println("key not found")
}
fun freqCount(arr:Array<Array<Int>>,num : Int){
    var count = 0
    for(i in arr.indices){
        for(j in arr.indices){  // Also write as (j in 0 until arr.size)
            if(arr[i][j]==num){
                count++
                println("$i and $j")
            }
        }
    }
    println("count = $count")
}
fun sumOfRow(arr:Array<Array<Int>>, row : Int){ //here we do a sum of special given row
    var sum = 0
    val row = row -1
    for(i in 0 until arr.size){ //if we manual write a row which we sum so this loop not required 
        for(j in 0 until arr.size){
            if(row == i){
                sum+=arr[i][j]  //in here [i] we write row num for manual 
            }
        }
    }
    println("Sum of Row ${row+1} is : $sum")
}
fun transposeMatrix(arr:Array<Array<Int>>) {
    val rows = arr.size
    val cols = arr[0].size
    val transposed = Array(cols) { Array(rows) { 0 } }

    for (i in 0 until rows) {
        for (j in 0 until cols) {
            transposed[j][i] = arr[i][j]
        }
    }
    println("Transposed Matrix:")
    transposed.forEach { row ->
        println(row.joinToString(" "))
    }    
}
fun main() {
// Creates a two-dimensional array
val arr = arrayOf(arrayOf(1,2,3,4),arrayOf(5,6,7,8),arrayOf(9,10,11,12),arrayOf(13,14,15,16))
val arrTranspose = arrayOf(  arrayOf(2, 2, 3),arrayOf(5, 6, 2))
//arr.forEach { println(it.joinToString()) }  //printing all the 2D array also use 
//arr.matrix.contentDeepToString()           //use for printing 2D array without foreach keyword
//search(arr,2)
//spiral(arr)
//diagonalDiff(arr)
//diagonalSum(arr)
//sortedSearch(arr,3)
//freqCount(arr,2)
//sumOfRow(arr,3) //we want to sum of 2nd row(actual 3rd row sum print because we start from 0 So I minus -1 into row)
transposeMatrix(arrTranspose)//Transpose of a matrix is the process of swapping therows to columns. For a 2x3 matrix
/*   Matrix: a11    a12    a13 
             a21    a22    a23
Transposed Matrix: a11    a21
                   a12    a22
                   a13    a23  */
}
