fun combinationSum(candidates: IntArray, target: Int): List<List<Int>> {
    val result = mutableListOf<List<Int>>()
    val current = mutableListOf<Int>()

    fun backtrack(start: Int, remaining: Int) {
        if (remaining == 0) {
            result.add(current.toList())
            return
        }
        if (remaining < 0) return

        for (i in start until candidates.size) {
            current.add(candidates[i])
            backtrack(i, remaining - candidates[i]) // not i + 1 because we can reuse same element
            current.removeAt(current.size - 1) // backtrack step
        }
    }

    backtrack(0, target)
    return result
}
fun main() {
     val candidates = intArrayOf(2, 3, 6, 7)
    val target = 7
    val result = combinationSum(candidates, target)
    println(result)
}
