class Solution {
    fun threeSum(nums: IntArray): List<List<Int>> {
       val list = mutableListOf<List<Int>>()
          nums.sort()
        for(i in 0 until nums.size-2){
          if (i > 0 && nums[i] == nums[i - 1]) continue  // Skip duplicates
           var left = i+1
            var right = nums.size-1
            while(left<right){
                val sum = nums[i]+nums[left]+nums[right]
                when{
                    sum == 0 ->{
                        list.add(listOf(nums[i],nums[left],nums[right]))
                        left++
                        right--
                        while(left < right && nums[left]==nums[left-1])left++
                        while(left < right && nums[right]==nums[right+1])right--
                    }
                    sum < 0 ->left++
                    else->right--
                }
            }
        }
     return list
    }
}


//O(n^3)

fun main(){
    val nums =arrayOf(-1,0,1,2,-1,-4)
    nums.sort()   //here we do sorting other vise duplicates value are occure and output is different
         val result = mutableSetOf<List<Int>>()  // Set to avoid duplicates

    for (i in 0 until nums.size) {
        for (j in i + 1 until nums.size) {
            for (k in j + 1 until nums.size) {
                if (nums[i] + nums[j] + nums[k] == 0) {
                    val triplet = listOf(nums[i], nums[j], nums[k])
                    result.add(triplet)  // Set ensures uniqueness
                }
            }
        }
    }

     println(result.toList() ) // Convert Set<List<Int>> to List<List<Int>>
}
