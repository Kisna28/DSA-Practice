class Solution { //Tm: O(n^2)  but this is fail when negative values are come also in leetcode it not pass all the cases.
    fun subarraySum(nums: IntArray, k: Int): Int {
         var count =0

        for(i in 0 until nums.size){
            var sum = 0
            for(j in i until nums.size){
                  sum += nums[j]
                      if(sum == k){
                       count++   
                       }
                }
        }
        return count
    }
}  
//  Or


    fun main(){   //O(N)
  val nums = arrayOf(1,2,3) 
    val key = 3
   var count = 0
   var prefixSum = 0

    val map = mutableMapOf<Int, Int>() 
    map[0] = 1  // base case: sum = 0 appears once

    for (num in nums) {
        prefixSum += num  //1   //3   //6

        // Check if there is a subarray sum equals key
        val remove = prefixSum - key   //2  0   3
        if (map.containsKey(remove)) {
            count += map[remove]!!   //1   2
        }

        // Update map with current prefixSum
        map[prefixSum] = map.getOrDefault(prefixSum, 0) + 1   
    }

    println("Total subarrays with sum = $key: $count")
        
    }


//  In leetcode this code is less runtime
{
val sumCounts = hashMapOf<Int,Int>()
       var curr = 0
       sumCounts[0] = 1
       var ans = 0

       for(num in nums){
        curr += num
        ans += sumCounts[curr - k]?: 0
        sumCounts[curr] = (sumCounts[curr]?:0) + 1
       }

       return ans
}
